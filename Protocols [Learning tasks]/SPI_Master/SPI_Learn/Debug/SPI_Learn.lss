
SPI_Learn.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  0000013e  2**0
                  ALLOC, LOAD, DATA
  1 .text         000000a4  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      0000002f  00000000  00000000  0000013e  2**0
                  CONTENTS, READONLY
  3 .debug_aranges 00000048  00000000  00000000  0000016d  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   00000afd  00000000  00000000  000001b5  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 000007fe  00000000  00000000  00000cb2  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   000002b5  00000000  00000000  000014b0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  00000074  00000000  00000000  00001768  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    0000027d  00000000  00000000  000017dc  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    00000039  00000000  00000000  00001a59  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000038  00000000  00000000  00001a92  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .text         00000004  000000e6  000000e6  0000013a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 12 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00001acc  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .text.USART_Init 00000012  000000ba  000000ba  0000010e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 14 .text.receive 00000008  000000d6  000000d6  0000012a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 15 .text.SPI_MasterInit 0000000a  000000cc  000000cc  00000120  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 16 .text.SPI_MasterTransmit 00000008  000000de  000000de  00000132  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 17 .text.main    00000016  000000a4  000000a4  000000f8  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 46 00 	jmp	0x8c	; 0x8c <__ctors_end>
   4:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
   8:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
   c:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  10:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  14:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  18:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  1c:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  20:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  24:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  28:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  2c:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  30:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  34:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  38:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  3c:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  40:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  44:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  48:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  4c:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  50:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  54:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  58:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  5c:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  60:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  64:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  68:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  6c:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  70:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  74:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  78:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  7c:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  80:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  84:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  88:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61
  98:	0e 94 52 00 	call	0xa4	; 0xa4 <_etext>
  9c:	0c 94 50 00 	jmp	0xa0	; 0xa0 <_exit>

000000a0 <_exit>:
  a0:	f8 94       	cli

000000a2 <__stop_program>:
  a2:	ff cf       	rjmp	.-2      	; 0xa2 <__stop_program>

Disassembly of section .text:

000000e6 <__bad_interrupt>:
  e6:	0c 94 00 00 	jmp	0	; 0x0 <__TEXT_REGION_ORIGIN__>

Disassembly of section .text.USART_Init:

000000ba <USART_Init>:
void transmit(unsigned char data)
{
	while( !(UCSR0A & (1<<UDRE))){
		;
	}
	UDR0 = data;
  ba:	90 93 90 00 	sts	0x0090, r25	; 0x800090 <__TEXT_REGION_LENGTH__+0x7e0090>
  be:	89 b9       	out	0x09, r24	; 9
  c0:	88 e1       	ldi	r24, 0x18	; 24
  c2:	8a b9       	out	0x0a, r24	; 10
  c4:	86 e0       	ldi	r24, 0x06	; 6
  c6:	80 93 95 00 	sts	0x0095, r24	; 0x800095 <__TEXT_REGION_LENGTH__+0x7e0095>
  ca:	08 95       	ret

Disassembly of section .text.receive:

000000d6 <receive>:
}

unsigned char receive()
{
	while( !(UCSR0A & (1<<RXC))){
  d6:	5f 9b       	sbis	0x0b, 7	; 11
  d8:	fe cf       	rjmp	.-4      	; 0xd6 <receive>
		;
	}
	return UDR0;
  da:	8c b1       	in	r24, 0x0c	; 12
}
  dc:	08 95       	ret

Disassembly of section .text.SPI_MasterInit:

000000cc <SPI_MasterInit>:
void transmit(unsigned char data)
{
	while( !(UCSR0A & (1<<UDRE))){
		;
	}
	UDR0 = data;
  cc:	87 e0       	ldi	r24, 0x07	; 7
  ce:	87 bb       	out	0x17, r24	; 23
  d0:	81 e5       	ldi	r24, 0x51	; 81
  d2:	8d b9       	out	0x0d, r24	; 13
  d4:	08 95       	ret

Disassembly of section .text.SPI_MasterTransmit:

000000de <SPI_MasterTransmit>:
	SPCR = (1<<SPE)|(1<<MSTR)|(1<<SPR0);
}

void SPI_MasterTransmit(char data)
{
	SPDR = data;
  de:	8f b9       	out	0x0f, r24	; 15
	while(!(SPSR & (1<<SPIF)))
  e0:	77 9b       	sbis	0x0e, 7	; 14
  e2:	fe cf       	rjmp	.-4      	; 0xe0 <SPI_MasterTransmit+0x2>
		;
}
  e4:	08 95       	ret

Disassembly of section .text.main:

000000a4 <main>:
void transmit(unsigned char data)
{
	while( !(UCSR0A & (1<<UDRE))){
		;
	}
	UDR0 = data;
  a4:	83 e3       	ldi	r24, 0x33	; 51
  a6:	90 e0       	ldi	r25, 0x00	; 0
  a8:	0e 94 5d 00 	call	0xba	; 0xba <USART_Init>
  ac:	0e 94 66 00 	call	0xcc	; 0xcc <SPI_MasterInit>
  b0:	0e 94 6b 00 	call	0xd6	; 0xd6 <receive>
  b4:	0e 94 6f 00 	call	0xde	; 0xde <SPI_MasterTransmit>
  b8:	fb cf       	rjmp	.-10     	; 0xb0 <main+0xc>
